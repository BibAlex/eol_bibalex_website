#term_form_container
  = form_for @query, url: term_search_results_path, method: :get, html: { id: "new_term_query", class: ["uk-form", "uk-form-horizontal", ("is-multiple-filters" if (@query.filters.length > 1))]} do |f|
    .filter.filter-row
      %span.js-typeahead-wrap.l-filter-full
        = text_field_tag "clade_name", f.object.clade&.native_node&.canonical_form, class: "js-clade-typeahead uk-input", placeholder: "clade (optional)"
        = f.hidden_field :clade_id, class: "js-typeahead-field"

    = f.fields_for :filters do |ff|
      .filter.uk-form-row
        - if f.object.filters.length > 1
          .l-filter-first.filter-icon
            .js-remove-filter{ 'uk-icon': "icon: close; ratio: 1.4", data: { index: ff.index }}
        %span.js-typeahead-wrap.filter-field.l-filter-full.filter-row{ class: ff.object.errors[:pred_uri].any? ? "is-filter-row-with-errors" : ""}
          - show_error(ff.object, :pred_uri)
          = text_field_tag "pred_name", pred_name(ff.object.pred_uri), class: "uk-input js-pred-typeahead", placeholder: "attribute"
          = ff.hidden_field :pred_uri, class: "js-typeahead-field"
        .filter-row
          = ff.select :op, op_select_options(ff.object), {}, class: "filter-input uk-select uk-form-width-small js-op-select"
        - if ff.object.numeric? || ff.object.range?
          .filter-row{ class: (ff.object.errors[:num_val1].any? || ff.object.errors[:num_val2].any?) ? "is-filter-row-with-errors" : ""}
            %span.filter-field
              - show_error(ff.object, :num_val1)
              = ff.text_field :num_val1, class: "filter-input uk-input uk-form-width-small"
            - if ff.object.range?
              %span.filter-txt to
              %span.filter-field
                - show_error(ff.object, :num_val2)
                = ff.text_field :num_val2, class: "filter-input uk-input uk-form-width-small"
          .filter-row{ class: ff.object.errors[:obj_uri].any? ? "is-filter-row-with-errors" : ""}
            = ff.select :units_uri, units_select_options(ff.object), {}, class: "filter-input uk-select l-filter-full"
        - elsif ff.object.object_term?
          .filter-row{ class: ff.object.errors[:obj_uri].any? ? "is-filter-row-with-errors" : ""}
            %span.js-typeahead-wrap.filter-field.l-filter-full
              - show_error(ff.object, :obj_uri)
              = text_field_tag "obj_name", obj_name(ff.object.obj_uri), class: "js-obj-typeahead uk-input", data: { 'pred-uri': ff.object.pred_uri }, placeholder: "value"
              = ff.hidden_field :obj_uri, class: "js-typeahead-field"

    .filter-row
      .filter.add-filter.js-add-filter
        %span.filter-icon{ 'uk-icon': "icon: plus; ratio: 1.4"}
        .filter-txt trait filter
    .filter-row.filter-row-flex
      .filter-radios
        .filter-field.filter-field-radio
          = label_tag :search_type_record, "records matching ANY filter"
          = radio_button_tag :result_type, :record, @result_type == :record
        .filter-field.filter-field-radio
          = label_tag :search_type_page, "taxa matching ALL filters"
          = radio_button_tag :result_type, :page, @result_type == :page
      = submit_tag "Download TSV", formaction: term_search_results_path( format: :csv), class: "filter-field filter-field-radio"
    = submit_tag "Search", class: "submit uk-button uk-button-primary uk-button-large uk-width-1-1"

